# For more information on GitHub Actions for Python projects, see: https://git.io/JtENw

name: pytest

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ${{ matrix.operating-system }}
    # Fixate to exact OS versions to avoid potential test failures over time
    # Uncomment this line if we are running on a solitary OS
    # runs-on: ubuntu-20.04
    strategy:
      matrix:
        # Uncomment this line if we are running on multiple operating systems
        operating-system: [ubuntu-20.04, macos-10.15, windows-2019]
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    # pip cache dependencies to save time
    - uses: actions/cache@v2
      if: startsWith(runner.os, 'Linux')
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    # When activating macOS, verify pip cache dir at
    #     https://github.com/actions/cache/blob/main/examples.md
    # - uses: actions/cache@v2
    #   if: startsWith(runner.os, 'macOS')
    #   with:
    #     path: ~/Library/Caches/pip
    #     key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
    #     restore-keys: |
    #       ${{ runner.os }}-pip-
    # When activating Windows, verify pip cache dir at
    #     https://github.com/actions/cache/blob/main/examples.md
    # - uses: actions/cache@v2
    #   if: startsWith(runner.os, 'Windows')
    #   with:
    #     path: ~\AppData\Local\pip\Cache
    #     key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
    #     restore-keys: |
    #       ${{ runner.os }}-pip-
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install OS prerequisites
      run: sudo apt-get install ripgrep
    - name: Search for existing linter ignore lines in Python
      run: |
        rg -t py --stats "(?:(?:flake8|noqa|pylint|type): *(?:disable|ignore|noqa|[A-Z][0-9][0-9][0-9])| Any|REPLACEME)" \
          $(find . -type f -name "*.py" ! -name "conf_correct.py") || true
    - name: Ensure we are not increasing the number of ignore lines as a guideline
      run: |
        if [ $(rg -t py --stats \
                  "(?:(?:flake8|noqa|pylint|type): *(?:disable|ignore|noqa|[A-Z][0-9][0-9][0-9])| Any|REPLACEME)" \
                  $(find . -type f -name "*.py" ! -name "conf_correct.py") \
                    | awk '/ matches/ && !/ contained matches/' \
                    | cut -d' ' -f1) -lt 8 ] ;
        then exit 0 ; else exit 1 ; fi ;

    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        python -u -m pip install --upgrade pip setuptools wheel
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run with flake8 only checking for Python syntax errors or undefined names
      run: |
        # stop the build if there are Python syntax errors or undefined names
        python -u -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    - name: Run tools using pytest, and also non-slow tests under code coverage
      run: |
        python -u -m pytest --bandit --black --flake8 --mypy --pylint -m "not slow" \
          --cov --cov-report term-missing --no-cov-on-fail --cov-fail-under=80
    # - name: Upload coverage report to codecov
    #   if: ${{ success() }}
    #   run: bash <(curl -s https://codecov.io/bash)
